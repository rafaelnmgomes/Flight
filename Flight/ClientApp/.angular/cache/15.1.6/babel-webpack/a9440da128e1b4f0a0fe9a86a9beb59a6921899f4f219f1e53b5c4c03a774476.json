{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class BookingService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\r\n   * Path part for operation listBooking\r\n   */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `listBooking$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  listBooking$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `listBooking$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  listBooking$Plain(params, context) {\n    return this.listBooking$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `listBooking()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  listBooking$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `listBooking$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  listBooking(params, context) {\n    return this.listBooking$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * Path part for operation cancelBooking\r\n   */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `cancelBooking()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  cancelBooking$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, BookingService.CancelBookingPath, 'delete');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `cancelBooking$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  cancelBooking(params, context) {\n    return this.cancelBooking$Response(params, context).pipe(map(r => r.body));\n  }\n}\nBookingService.ListBookingPath = '/Booking/{email}';\nBookingService.CancelBookingPath = '/Booking';\nBookingService.ɵfac = function BookingService_Factory(t) {\n  return new (t || BookingService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nBookingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookingService,\n  factory: BookingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","BaseService","RequestBuilder","map","filter","BookingService","constructor","config","http","listBooking$Plain$Response","params","context","rb","rootUrl","ListBookingPath","path","email","request","build","responseType","accept","pipe","r","listBooking$Plain","body","listBooking$Response","listBooking","cancelBooking$Response","CancelBookingPath","clone","undefined","cancelBooking","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\gomes\\source\\repos\\Flight\\Flight\\ClientApp\\src\\app\\api\\services\\booking.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { BookDto } from '../models/book-dto';\r\nimport { BookingRm } from '../models/booking-rm';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BookingService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation listBooking\r\n   */\r\n  static readonly ListBookingPath = '/Booking/{email}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `listBooking$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  listBooking$Plain$Response(params: {\r\n    email: string;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<Array<BookingRm>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<BookingRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `listBooking$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  listBooking$Plain(params: {\r\n    email: string;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<Array<BookingRm>> {\r\n\r\n    return this.listBooking$Plain$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<Array<BookingRm>>) => r.body as Array<BookingRm>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `listBooking()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  listBooking$Response(params: {\r\n    email: string;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<Array<BookingRm>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, BookingService.ListBookingPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<BookingRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `listBooking$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  listBooking(params: {\r\n    email: string;\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<Array<BookingRm>> {\r\n\r\n    return this.listBooking$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<Array<BookingRm>>) => r.body as Array<BookingRm>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation cancelBooking\r\n   */\r\n  static readonly CancelBookingPath = '/Booking';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `cancelBooking()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  cancelBooking$Response(params?: {\r\n    body?: BookDto\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, BookingService.CancelBookingPath, 'delete');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*',\r\n      context: context\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `cancelBooking$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  cancelBooking(params?: {\r\n    body?: BookDto\r\n  },\r\n  context?: HttpContext\r\n\r\n): Observable<void> {\r\n\r\n    return this.cancelBooking$Response(params,context).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}